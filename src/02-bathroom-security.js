/*
 * Keypad
 */

const key1 = { label: '1', R: '2', D: '4' }
const key2 = { label: '2', L: '1', R: '3', D: '5' }
const key3 = { label: '3', L: '2', D: '6' }
const key4 = { label: '4', U: '1', R: '5', D: '7' }
const key5 = { label: '5', U: '2', R: '6', D: '8', L: '4' }
const key6 = { label: '6', U: '3', D: '9', L: '5' }
const key7 = { label: '7', U: '4', R: '8' }
const key8 = { label: '8', U: '5', R: '9', L: '7' }
const key9 = { label: '9', U: '6', L: '8' }

const normalKeypad = [key1, key2, key3, key4, key5, key6, key7, key8, key9]

const alienKey1 = { label: '1', D: '3' }
const alienKey2 = { label: '2', R: '3', D: '6' }
const alienKey3 = { label: '3', L: '2', R: '4', D: '7', U: '1' }
const alienKey4 = { label: '4', L: '3', D: '8' }
const alienKey5 = { label: '5', R: '6' }
const alienKey6 = { label: '6', U: '2', D: 'A', L: '5', R: '7' }
const alienKey7 = { label: '7', U: '3', R: '8', D: 'B', L: '6' }
const alienKey8 = { label: '8', U: '4', R: '9', L: '7', D: 'C' }
const alienKey9 = { label: '9', L: '8' }
const alienKeyA = { label: 'A', U: '6', R: 'B' }
const alienKeyB = { label: 'B', U: '7', R: 'C', L: 'A', D: 'D' }
const alienKeyC = { label: 'C', U: '8', L: 'B' }
const alienKeyD = { label: 'D', U: 'B' }

const alienKeypad = [alienKey1, alienKey2, alienKey3, alienKey4, alienKey5,
                     alienKey6, alienKey7, alienKey8, alienKey9, alienKeyA,
                     alienKeyB, alienKeyC, alienKeyD]

const keyFromLabel = (label, keypad) => keypad.filter((key) => key.label === label)[0]

/*
 * Actions
 */

const moveFinger = (direction) => ({ type: 'MOVE_FINGER', direction })
const pressKey = { type: 'PRESS_KEY' }

/*
 * Reducer
 */

const initialState = {
  currentKey: '5',
  password: []
}

const createReducer = (keypad) => {
  return (state = initialState, action) => {
    switch (action.type) {
      case 'MOVE_FINGER':
        const newKey = keyFromLabel(state.currentKey, keypad)[action.direction]
        return { ...state, currentKey: newKey ? newKey : state.currentKey }
      case 'PRESS_KEY':
        return { ...state, password: [...state.password, state.currentKey] }
      default:
        return state
    }
  }
}

/*
 * Plumbing
 */

 const createStore = (reducer, initialState) => {
   let state = initialState

   return (action) => {
       state = reducer(state, action)
       return state
   }
 }


/*
 * "main"
 */

const input = ['URULLLLLRLDDUURRRULLLDURRDRDRDLURURURLDLLLLRUDDRRLUDDDDDDLRLRDDDUUDUDLDULUDLDURDULLRDDURLLLRRRLLRURLLUDRDLLRRLDDRUDULRRDDLUUUDRLDLURRRULURRDLLLDDDLUDURDDRLDDDLLRULDRUDDDLUDLURUDLLRURRUURUDLLLUUUUDDURDRDDDLDRRUDURDLLLULUDURURDUUULRULUDRUUUUDLRLUUUUUDDRRDDDURULLLRRLDURLDLDRDLLLUULLRRLLLLDRLRDRRDRRUDDLULUUDDDDRRUUDDLURLRDUUDRRLDUDLRRRLRRUUDURDRULULRDURDRRRDLDUUULRDDLRLRDLUUDDUDDRLRRULLLULULLDDDRRDUUUDDRURDDURDRLRDLDRDRULRLUURUDRLULRLURLRRULDRLRDUDLDURLLRLUDLUDDURDUURLUDRLUL',
               'LLLUUURUULDDDULRRDLRLLLLLLLLRURRDLURLUDRRDDULDRRRRRRLDURRULDDULLDDDRUUDLUDULLDLRRLUULULRULURDURLLDULURDUDLRRLRLLDULLRLDURRUULDLDULLRDULULLLULDRLDLDLDLDDLULRLDUDRULUDDRDDRLRLURURRDULLUULLDRRDRRDLDLLRDLDDUUURLUULDDRRRUULDULDDRDDLULUDRURUULLUDRURDRULDRUULLRRDURUDDLDUULLDDRLRRDUDRLRRRLDRLRULDRDRRUDRLLLDDUDLULLURRURRLUURDRLLDLLDUDLUUURRLRDDUDRLUDLLRULLDUUURDLUUUDUDULRLDLDRUUDULRDRRUDLULRLRDLDRRDDDUDLDLDLRUURLDLLUURDLDLRDLDRUDDUURLLLRDRDRRULLRLRDULUDDDLUDURLDUDLLRULRDURDRDLLULRRDLLLDUURRDUDDLDDRULRRRRLRDDRURLLRRLLL',
               'DRURLDDDDRLUDRDURUDDULLRRLLRLDDRLULURLDURRLDRRLRLUURDDRRDLRDLDLULDURUDRLRUDULRURURLRUDRLLDDUDDRDLDRLLDDLRRDRUUULDUUDRUULRLLDLLULLLRRDRURDLDDRRDDUDDULLDUUULDRUDLDLURLDRURUDLRDDDURRLRDDUDLLLRRUDRULRULRRLLUUULDRLRRRLLLDLLDUDDUUDRURLDLRRUUURLUDDDRRDDLDDDDLUURDDULDRLRURLULLURRDRLLURLLLURDURLDLUDUUDUULLRLDLLLLULRDDLDUDUDDDUULURRLULDLDRLRDRLULLUDDUUUUURDRURLDUULDRRDULUDUDLDDRDLUDDURUDURLDULRUDRRDLRLRDRRURLDLURLULULDDUUDLRLLLLURRURULDDRUUULLDULDRDULDDDLLLRLULDDUDLRUDUDUDURLURLDDLRULDLURD',
               'DRUDRDURUURDLRLUUUUURUDLRDUURLLDUULDUULDLURDDUULDRDDRDULUDDDRRRRLDDUURLRDLLRLRURDRRRDURDULRLDRDURUDLLDDULRDUDULRRLLUDLLUUURDULRDDLURULRURDDLRLLULUDURDRRUDLULLRLDUDLURUDRUULDUDLRDUDRRDULDDLDRLRRULURULUURDULRRLDLDULULRUUUUULUURLURLRDLLRRRRLURRUDLRLDDDLDRDRURLULRDUDLRLURRDRRLRLLDLDDLLRRULRLRLRUDRUUULLDUULLDDRLUDDRURLRLDLULDURLLRRLDLLRDDDUDDUULLUDRUDURLLRDRUDLUDLLUDRUUDLRUURRRLLUULLUUURLLLRURUULLDLLDURUUUULDDDLRLURDRLRRRRRRUDLLLRUUULDRRDLRDLLDRDLDDLDLRDUDLDDRDDDDRULRRLRDULLDULULULRULLRRLLUURUUUDLDLUDUDDDLUUDDDDUDDDUURUUDRDURRLUULRRDUUDDUDRRRDLRDRLDLRRURUUDRRRUUDLDRLRDURD',
               'DDDLRURUDRRRURUUDLRLRDULDRDUULRURRRUULUDULDDLRRLLRLDDLURLRUDRLRRLRDLRLLDDLULDLRRURDDRDLLDDRUDRRRURRDUDULUDDULRRDRLDUULDLLLDRLUDRDURDRRDLLLLRRLRLLULRURUUDDRULDLLRULDRDLUDLULDDDLLUULRRLDDUURDLULUULULRDDDLDUDDLLLRRLLLDULRDDLRRUDDRDDLLLLDLDLULRRRDUDURRLUUDLLLLDUUULDULRDRULLRDRUDULRUUDULULDRDLDUDRRLRRDRLDUDLULLUDDLURLUUUDRDUDRULULDRDLRDRRLDDRRLUURDRULDLRRLLRRLDLRRLDLDRULDDRLURDULRRUDURRUURDUUURULUUUDLRRLDRDLULDURUDUDLUDDDULULRULDRRRLRURLRLRLUDDLUUDRRRLUUUDURLDRLRRDRRDURLLL']

const normalStore = createStore(createReducer(normalKeypad), initialState)
const alienStore = createStore(createReducer(alienKeypad), initialState)

let normalFinalState
let alienFinalState

input.forEach((keyInput) => {
  keyInput.split('').forEach((direction) => {
    normalStore(moveFinger(direction))
    alienStore(moveFinger(direction))
  })
  normalFinalState = normalStore(pressKey)
  alienFinalState = alienStore(pressKey)
})

console.log(normalFinalState)
console.log(alienFinalState)
